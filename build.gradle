/*
 * Copyright 2021-2022 Exactpro (Exactpro Systems Limited)
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.palantir.docker' version '0.25.0'
    id 'org.jetbrains.kotlin.jvm' version "${kotlin_version}"
    id 'com.github.harbby.gradle.serviceloader' version '1.1.5'
    id 'application'
}

ext {
    sharedDir = file("${project.rootDir}/shared")
    sailfishVersion = '3.2.1752'
}

group = 'com.exactpro.th2'
version = release_version

sourceCompatibility = 11
targetCompatibility = 11

ext {
    junitVersion        = '5.8.1'
}

repositories {
    mavenCentral()
    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

jar {
    manifest {
        attributes(
                'Created-By':               "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title':      '',
                'Specification-Vendor':     'Exactpro Systems LLC',
                'Implementation-Title':     project.archivesBaseName,
                'Implementation-Vendor':    'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version':   project.version
        )
    }
}

dependencies {
    api platform('com.exactpro.th2:bom:3.1.0')
    implementation 'com.exactpro.th2:common:3.33.0-th2-2422-1768677066-SNAPSHOT'
    implementation 'com.exactpro.th2:codec:4.5.0-th2-2929-1768697681-SNAPSHOT'
    implementation 'com.exactpro.th2:sailfish-utils:3.12.3'

    implementation "com.exactpro.sf:sailfish-core:${sailfishVersion}"

    implementation 'org.slf4j:slf4j-log4j12'
    implementation 'org.slf4j:slf4j-api'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}"

    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.1'
    implementation 'com.github.javadev:underscore:1.69'
    
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5:${kotlin_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

application {
    mainClassName 'com.exactpro.th2.codec.MainKt'
}

applicationName = 'service'

dockerPrepare {
    dependsOn distTar
}

docker {
    copySpec.from(tarTree("$buildDir/distributions/${applicationName}.tar"))
}

sourceSets {
    main.kotlin.srcDirs += "src/main/kotlin"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

clean {
    delete sharedDir
}

serviceLoader {
    serviceInterface 'com.exactpro.th2.codec.api.IPipelineCodecFactory'
}

test {
    useJUnitPlatform()
    //exclude 'com/exactpro/th2/codec/xml'
}
